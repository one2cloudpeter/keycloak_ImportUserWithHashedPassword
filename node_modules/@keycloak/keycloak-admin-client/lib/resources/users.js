import Resource from './resource.js';
export class Users extends Resource {
    constructor(client) {
        super(client, {
            path: '/admin/realms/{realm}/users',
            getUrlParams: () => ({
                realm: client.realmName,
            }),
            getBaseUrl: () => client.baseUrl,
        });
        this.find = this.makeRequest({
            method: 'GET',
        });
        this.create = this.makeRequest({
            method: 'POST',
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.findOne = this.makeRequest({
            method: 'GET',
            path: '/{id}',
            urlParamKeys: ['id'],
            catchNotFound: true,
        });
        this.update = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}',
            urlParamKeys: ['id'],
        });
        this.del = this.makeRequest({
            method: 'DELETE',
            path: '/{id}',
            urlParamKeys: ['id'],
        });
        this.count = this.makeRequest({
            method: 'GET',
            path: '/count',
        });
        this.getProfile = this.makeRequest({
            method: 'GET',
            path: '/profile',
        });
        this.updateProfile = this.makeRequest({
            method: 'PUT',
            path: '/profile',
        });
        this.listRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings',
            urlParamKeys: ['id'],
        });
        this.addRealmRoleMappings = this.makeRequest({
            method: 'POST',
            path: '/{id}/role-mappings/realm',
            urlParamKeys: ['id'],
            payloadKey: 'roles',
        });
        this.listRealmRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/realm',
            urlParamKeys: ['id'],
        });
        this.delRealmRoleMappings = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/role-mappings/realm',
            urlParamKeys: ['id'],
            payloadKey: 'roles',
        });
        this.listAvailableRealmRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/realm/available',
            urlParamKeys: ['id'],
        });
        this.listCompositeRealmRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/realm/composite',
            urlParamKeys: ['id'],
        });
        this.listClientRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/clients/{clientUniqueId}',
            urlParamKeys: ['id', 'clientUniqueId'],
        });
        this.addClientRoleMappings = this.makeRequest({
            method: 'POST',
            path: '/{id}/role-mappings/clients/{clientUniqueId}',
            urlParamKeys: ['id', 'clientUniqueId'],
            payloadKey: 'roles',
        });
        this.delClientRoleMappings = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/role-mappings/clients/{clientUniqueId}',
            urlParamKeys: ['id', 'clientUniqueId'],
            payloadKey: 'roles',
        });
        this.listAvailableClientRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/clients/{clientUniqueId}/available',
            urlParamKeys: ['id', 'clientUniqueId'],
        });
        this.listCompositeClientRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/clients/{clientUniqueId}/composite',
            urlParamKeys: ['id', 'clientUniqueId'],
        });
        this.executeActionsEmail = this.makeRequest({
            method: 'PUT',
            path: '/{id}/execute-actions-email',
            urlParamKeys: ['id'],
            payloadKey: 'actions',
            queryParamKeys: ['lifespan', 'redirectUri', 'clientId'],
            headers: { 'content-type': 'application/json' },
            keyTransform: {
                clientId: 'client_id',
                redirectUri: 'redirect_uri',
            },
        });
        this.listGroups = this.makeRequest({
            method: 'GET',
            path: '/{id}/groups',
            urlParamKeys: ['id'],
        });
        this.addToGroup = this.makeRequest({
            method: 'PUT',
            path: '/{id}/groups/{groupId}',
            urlParamKeys: ['id', 'groupId'],
        });
        this.delFromGroup = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/groups/{groupId}',
            urlParamKeys: ['id', 'groupId'],
        });
        this.countGroups = this.makeRequest({
            method: 'GET',
            path: '/{id}/groups/count',
            urlParamKeys: ['id'],
        });
        this.listFederatedIdentities = this.makeRequest({
            method: 'GET',
            path: '/{id}/federated-identity',
            urlParamKeys: ['id'],
        });
        this.addToFederatedIdentity = this.makeRequest({
            method: 'POST',
            path: '/{id}/federated-identity/{federatedIdentityId}',
            urlParamKeys: ['id', 'federatedIdentityId'],
            payloadKey: 'federatedIdentity',
        });
        this.delFromFederatedIdentity = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/federated-identity/{federatedIdentityId}',
            urlParamKeys: ['id', 'federatedIdentityId'],
        });
        this.removeTotp = this.makeRequest({
            method: 'PUT',
            path: '/{id}/remove-totp',
            urlParamKeys: ['id'],
        });
        this.resetPassword = this.makeRequest({
            method: 'PUT',
            path: '/{id}/reset-password',
            urlParamKeys: ['id'],
            payloadKey: 'credential',
        });
        this.getUserStorageCredentialTypes = this.makeRequest({
            method: 'GET',
            path: '/{id}/configured-user-storage-credential-types',
            urlParamKeys: ['id'],
        });
        this.getCredentials = this.makeRequest({
            method: 'GET',
            path: '/{id}/credentials',
            urlParamKeys: ['id'],
        });
        this.deleteCredential = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/credentials/{credentialId}',
            urlParamKeys: ['id', 'credentialId'],
        });
        this.updateCredentialLabel = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}/credentials/{credentialId}/userLabel',
            urlParamKeys: ['id', 'credentialId'],
            headers: { 'content-type': 'text/plain' },
        });
        this.moveCredentialPositionDown = this.makeRequest({
            method: 'POST',
            path: '/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}',
            urlParamKeys: ['id', 'credentialId', 'newPreviousCredentialId'],
        });
        this.moveCredentialPositionUp = this.makeRequest({
            method: 'POST',
            path: '/{id}/credentials/{credentialId}/moveToFirst',
            urlParamKeys: ['id', 'credentialId'],
        });
        this.sendVerifyEmail = this.makeRequest({
            method: 'PUT',
            path: '/{id}/send-verify-email',
            urlParamKeys: ['id'],
            queryParamKeys: ['clientId', 'redirectUri'],
            keyTransform: {
                clientId: 'client_id',
                redirectUri: 'redirect_uri',
            },
        });
        this.listSessions = this.makeRequest({
            method: 'GET',
            path: '/{id}/sessions',
            urlParamKeys: ['id'],
        });
        this.listOfflineSessions = this.makeRequest({
            method: 'GET',
            path: '/{id}/offline-sessions/{clientId}',
            urlParamKeys: ['id', 'clientId'],
        });
        this.logout = this.makeRequest({
            method: 'POST',
            path: '/{id}/logout',
            urlParamKeys: ['id'],
        });
        this.listConsents = this.makeRequest({
            method: 'GET',
            path: '/{id}/consents',
            urlParamKeys: ['id'],
        });
        this.impersonation = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/impersonation',
            urlParamKeys: ['id'],
        });
        this.revokeConsent = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/consents/{clientId}',
            urlParamKeys: ['id', 'clientId'],
        });
    }
}
//# sourceMappingURL=users.js.map