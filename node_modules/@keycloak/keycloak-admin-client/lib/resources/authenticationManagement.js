import Resource from './resource.js';
export class AuthenticationManagement extends Resource {
    constructor(client) {
        super(client, {
            path: '/admin/realms/{realm}/authentication',
            getUrlParams: () => ({
                realm: client.realmName,
            }),
            getBaseUrl: () => client.baseUrl,
        });
        this.registerRequiredAction = this.makeRequest({
            method: 'POST',
            path: '/register-required-action',
        });
        this.getRequiredActions = this.makeRequest({
            method: 'GET',
            path: '/required-actions',
        });
        this.getRequiredActionForAlias = this.makeRequest({
            method: 'GET',
            path: '/required-actions/{alias}',
            urlParamKeys: ['alias'],
            catchNotFound: true,
        });
        this.getClientAuthenticatorProviders = this.makeRequest({
            method: 'GET',
            path: '/client-authenticator-providers',
        });
        this.getAuthenticatorProviders = this.makeRequest({
            method: 'GET',
            path: '/authenticator-providers',
        });
        this.getFormActionProviders = this.makeRequest({
            method: 'GET',
            path: '/form-action-providers',
        });
        this.updateRequiredAction = this.makeUpdateRequest({
            method: 'PUT',
            path: '/required-actions/{alias}',
            urlParamKeys: ['alias'],
        });
        this.deleteRequiredAction = this.makeRequest({
            method: 'DELETE',
            path: '/required-actions/{alias}',
            urlParamKeys: ['alias'],
        });
        this.lowerRequiredActionPriority = this.makeRequest({
            method: 'POST',
            path: '/required-actions/{alias}/lower-priority',
            urlParamKeys: ['alias'],
        });
        this.raiseRequiredActionPriority = this.makeRequest({
            method: 'POST',
            path: '/required-actions/{alias}/raise-priority',
            urlParamKeys: ['alias'],
        });
        this.getUnregisteredRequiredActions = this.makeRequest({
            method: 'GET',
            path: '/unregistered-required-actions',
        });
        this.getFlows = this.makeRequest({
            method: 'GET',
            path: '/flows',
        });
        this.getFlow = this.makeRequest({
            method: 'GET',
            path: '/flows/{flowId}',
            urlParamKeys: ['flowId'],
        });
        this.getFormProviders = this.makeRequest({
            method: 'GET',
            path: '/form-providers',
        });
        this.createFlow = this.makeRequest({
            method: 'POST',
            path: '/flows',
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.copyFlow = this.makeRequest({
            method: 'POST',
            path: '/flows/{flow}/copy',
            urlParamKeys: ['flow'],
        });
        this.deleteFlow = this.makeRequest({
            method: 'DELETE',
            path: '/flows/{flowId}',
            urlParamKeys: ['flowId'],
        });
        this.updateFlow = this.makeUpdateRequest({
            method: 'PUT',
            path: '/flows/{flowId}',
            urlParamKeys: ['flowId'],
        });
        this.getExecutions = this.makeRequest({
            method: 'GET',
            path: '/flows/{flow}/executions',
            urlParamKeys: ['flow'],
        });
        this.addExecution = this.makeUpdateRequest({
            method: 'POST',
            path: '/flows/{flow}/executions',
            urlParamKeys: ['flow'],
        });
        this.addExecutionToFlow = this.makeRequest({
            method: 'POST',
            path: '/flows/{flow}/executions/execution',
            urlParamKeys: ['flow'],
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.addFlowToFlow = this.makeRequest({
            method: 'POST',
            path: '/flows/{flow}/executions/flow',
            urlParamKeys: ['flow'],
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.updateExecution = this.makeUpdateRequest({
            method: 'PUT',
            path: '/flows/{flow}/executions',
            urlParamKeys: ['flow'],
        });
        this.delExecution = this.makeRequest({
            method: 'DELETE',
            path: '/executions/{id}',
            urlParamKeys: ['id'],
        });
        this.lowerPriorityExecution = this.makeRequest({
            method: 'POST',
            path: '/executions/{id}/lower-priority',
            urlParamKeys: ['id'],
        });
        this.raisePriorityExecution = this.makeRequest({
            method: 'POST',
            path: '/executions/{id}/raise-priority',
            urlParamKeys: ['id'],
        });
        this.getConfigDescription = this.makeRequest({
            method: 'GET',
            path: 'config-description/{providerId}',
            urlParamKeys: ['providerId'],
        });
        this.createConfig = this.makeRequest({
            method: 'POST',
            path: '/executions/{id}/config',
            urlParamKeys: ['id'],
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.updateConfig = this.makeRequest({
            method: 'PUT',
            path: '/config/{id}',
            urlParamKeys: ['id'],
        });
        this.getConfig = this.makeRequest({
            method: 'GET',
            path: '/config/{id}',
            urlParamKeys: ['id'],
        });
        this.delConfig = this.makeRequest({
            method: 'DELETE',
            path: '/config/{id}',
            urlParamKeys: ['id'],
        });
    }
}
//# sourceMappingURL=authenticationManagement.js.map