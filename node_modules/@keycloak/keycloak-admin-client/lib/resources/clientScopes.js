import Resource from './resource.js';
export class ClientScopes extends Resource {
    constructor(client) {
        super(client, {
            path: '/admin/realms/{realm}',
            getUrlParams: () => ({
                realm: client.realmName,
            }),
            getBaseUrl: () => client.baseUrl,
        });
        this.find = this.makeRequest({
            method: 'GET',
            path: '/client-scopes',
        });
        this.create = this.makeRequest({
            method: 'POST',
            path: '/client-scopes',
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.findOne = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}',
            urlParamKeys: ['id'],
            catchNotFound: true,
        });
        this.update = this.makeUpdateRequest({
            method: 'PUT',
            path: '/client-scopes/{id}',
            urlParamKeys: ['id'],
        });
        this.del = this.makeRequest({
            method: 'DELETE',
            path: '/client-scopes/{id}',
            urlParamKeys: ['id'],
        });
        this.listDefaultClientScopes = this.makeRequest({
            method: 'GET',
            path: '/default-default-client-scopes',
        });
        this.addDefaultClientScope = this.makeRequest({
            method: 'PUT',
            path: '/default-default-client-scopes/{id}',
            urlParamKeys: ['id'],
        });
        this.delDefaultClientScope = this.makeRequest({
            method: 'DELETE',
            path: '/default-default-client-scopes/{id}',
            urlParamKeys: ['id'],
        });
        this.listDefaultOptionalClientScopes = this.makeRequest({
            method: 'GET',
            path: '/default-optional-client-scopes',
        });
        this.addDefaultOptionalClientScope = this.makeRequest({
            method: 'PUT',
            path: '/default-optional-client-scopes/{id}',
            urlParamKeys: ['id'],
        });
        this.delDefaultOptionalClientScope = this.makeRequest({
            method: 'DELETE',
            path: '/default-optional-client-scopes/{id}',
            urlParamKeys: ['id'],
        });
        this.addMultipleProtocolMappers = this.makeUpdateRequest({
            method: 'POST',
            path: '/client-scopes/{id}/protocol-mappers/add-models',
            urlParamKeys: ['id'],
        });
        this.addProtocolMapper = this.makeUpdateRequest({
            method: 'POST',
            path: '/client-scopes/{id}/protocol-mappers/models',
            urlParamKeys: ['id'],
        });
        this.listProtocolMappers = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/protocol-mappers/models',
            urlParamKeys: ['id'],
        });
        this.findProtocolMapper = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/protocol-mappers/models/{mapperId}',
            urlParamKeys: ['id', 'mapperId'],
            catchNotFound: true,
        });
        this.findProtocolMappersByProtocol = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/protocol-mappers/protocol/{protocol}',
            urlParamKeys: ['id', 'protocol'],
            catchNotFound: true,
        });
        this.updateProtocolMapper = this.makeUpdateRequest({
            method: 'PUT',
            path: '/client-scopes/{id}/protocol-mappers/models/{mapperId}',
            urlParamKeys: ['id', 'mapperId'],
        });
        this.delProtocolMapper = this.makeRequest({
            method: 'DELETE',
            path: '/client-scopes/{id}/protocol-mappers/models/{mapperId}',
            urlParamKeys: ['id', 'mapperId'],
        });
        this.listScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/scope-mappings',
            urlParamKeys: ['id'],
        });
        this.addClientScopeMappings = this.makeUpdateRequest({
            method: 'POST',
            path: '/client-scopes/{id}/scope-mappings/clients/{client}',
            urlParamKeys: ['id', 'client'],
        });
        this.listClientScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/scope-mappings/clients/{client}',
            urlParamKeys: ['id', 'client'],
        });
        this.listAvailableClientScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/scope-mappings/clients/{client}/available',
            urlParamKeys: ['id', 'client'],
        });
        this.listCompositeClientScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/scope-mappings/clients/{client}/composite',
            urlParamKeys: ['id', 'client'],
        });
        this.delClientScopeMappings = this.makeUpdateRequest({
            method: 'DELETE',
            path: '/client-scopes/{id}/scope-mappings/clients/{client}',
            urlParamKeys: ['id', 'client'],
        });
        this.addRealmScopeMappings = this.makeUpdateRequest({
            method: 'POST',
            path: '/client-scopes/{id}/scope-mappings/realm',
            urlParamKeys: ['id'],
        });
        this.listRealmScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/scope-mappings/realm',
            urlParamKeys: ['id'],
        });
        this.listAvailableRealmScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/scope-mappings/realm/available',
            urlParamKeys: ['id'],
        });
        this.listCompositeRealmScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/client-scopes/{id}/scope-mappings/realm/composite',
            urlParamKeys: ['id'],
        });
        this.delRealmScopeMappings = this.makeUpdateRequest({
            method: 'DELETE',
            path: '/client-scopes/{id}/scope-mappings/realm',
            urlParamKeys: ['id'],
        });
    }
    async findOneByName(payload) {
        const allScopes = await this.find({
            ...(payload.realm ? { realm: payload.realm } : {}),
        });
        return allScopes.find((item) => item.name === payload.name);
    }
    async delByName(payload) {
        const scope = await this.findOneByName(payload);
        if (!scope) {
            throw new Error('Scope not found.');
        }
        await this.del({
            ...(payload.realm ? { realm: payload.realm } : {}),
            id: scope.id,
        });
    }
    async findProtocolMapperByName(payload) {
        const allProtocolMappers = await this.listProtocolMappers({
            id: payload.id,
            ...(payload.realm ? { realm: payload.realm } : {}),
        });
        return allProtocolMappers.find((mapper) => mapper.name === payload.name);
    }
}
//# sourceMappingURL=clientScopes.js.map