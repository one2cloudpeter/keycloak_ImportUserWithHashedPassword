import Resource from './resource.js';
export class IdentityProviders extends Resource {
    constructor(client) {
        super(client, {
            path: '/admin/realms/{realm}/identity-provider',
            getUrlParams: () => ({
                realm: client.realmName,
            }),
            getBaseUrl: () => client.baseUrl,
        });
        this.find = this.makeRequest({
            method: 'GET',
            path: '/instances',
        });
        this.create = this.makeRequest({
            method: 'POST',
            path: '/instances',
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.findOne = this.makeRequest({
            method: 'GET',
            path: '/instances/{alias}',
            urlParamKeys: ['alias'],
            catchNotFound: true,
        });
        this.update = this.makeUpdateRequest({
            method: 'PUT',
            path: '/instances/{alias}',
            urlParamKeys: ['alias'],
        });
        this.del = this.makeRequest({
            method: 'DELETE',
            path: '/instances/{alias}',
            urlParamKeys: ['alias'],
        });
        this.findFactory = this.makeRequest({
            method: 'GET',
            path: '/providers/{providerId}',
            urlParamKeys: ['providerId'],
        });
        this.findMappers = this.makeRequest({
            method: 'GET',
            path: '/instances/{alias}/mappers',
            urlParamKeys: ['alias'],
        });
        this.findOneMapper = this.makeRequest({
            method: 'GET',
            path: '/instances/{alias}/mappers/{id}',
            urlParamKeys: ['alias', 'id'],
            catchNotFound: true,
        });
        this.createMapper = this.makeRequest({
            method: 'POST',
            path: '/instances/{alias}/mappers',
            urlParamKeys: ['alias'],
            payloadKey: 'identityProviderMapper',
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.updateMapper = this.makeUpdateRequest({
            method: 'PUT',
            path: '/instances/{alias}/mappers/{id}',
            urlParamKeys: ['alias', 'id'],
        });
        this.delMapper = this.makeRequest({
            method: 'DELETE',
            path: '/instances/{alias}/mappers/{id}',
            urlParamKeys: ['alias', 'id'],
        });
        this.findMapperTypes = this.makeRequest({
            method: 'GET',
            path: '/instances/{alias}/mapper-types',
            urlParamKeys: ['alias'],
        });
        this.importFromUrl = this.makeRequest({
            method: 'POST',
            path: '/import-config',
        });
        this.updatePermission = this.makeUpdateRequest({
            method: 'PUT',
            path: '/instances/{alias}/management/permissions',
            urlParamKeys: ['alias'],
        });
        this.listPermissions = this.makeRequest({
            method: 'GET',
            path: '/instances/{alias}/management/permissions',
            urlParamKeys: ['alias'],
        });
    }
}
//# sourceMappingURL=identityProviders.js.map