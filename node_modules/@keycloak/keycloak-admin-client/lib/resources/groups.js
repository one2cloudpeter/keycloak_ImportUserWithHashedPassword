import Resource from './resource.js';
export class Groups extends Resource {
    constructor(client) {
        super(client, {
            path: '/admin/realms/{realm}/groups',
            getUrlParams: () => ({
                realm: client.realmName,
            }),
            getBaseUrl: () => client.baseUrl,
        });
        this.find = this.makeRequest({
            method: 'GET',
        });
        this.create = this.makeRequest({
            method: 'POST',
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.findOne = this.makeRequest({
            method: 'GET',
            path: '/{id}',
            urlParamKeys: ['id'],
            catchNotFound: true,
        });
        this.update = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}',
            urlParamKeys: ['id'],
        });
        this.del = this.makeRequest({
            method: 'DELETE',
            path: '/{id}',
            urlParamKeys: ['id'],
        });
        this.count = this.makeRequest({
            method: 'GET',
            path: '/count',
        });
        this.setOrCreateChild = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/children',
            urlParamKeys: ['id'],
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.listMembers = this.makeRequest({
            method: 'GET',
            path: '/{id}/members',
            urlParamKeys: ['id'],
            catchNotFound: true,
        });
        this.listRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings',
            urlParamKeys: ['id'],
        });
        this.addRealmRoleMappings = this.makeRequest({
            method: 'POST',
            path: '/{id}/role-mappings/realm',
            urlParamKeys: ['id'],
            payloadKey: 'roles',
        });
        this.listRealmRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/realm',
            urlParamKeys: ['id'],
        });
        this.delRealmRoleMappings = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/role-mappings/realm',
            urlParamKeys: ['id'],
            payloadKey: 'roles',
        });
        this.listAvailableRealmRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/realm/available',
            urlParamKeys: ['id'],
        });
        this.listCompositeRealmRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/realm/composite',
            urlParamKeys: ['id'],
        });
        this.listClientRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/clients/{clientUniqueId}',
            urlParamKeys: ['id', 'clientUniqueId'],
        });
        this.addClientRoleMappings = this.makeRequest({
            method: 'POST',
            path: '/{id}/role-mappings/clients/{clientUniqueId}',
            urlParamKeys: ['id', 'clientUniqueId'],
            payloadKey: 'roles',
        });
        this.delClientRoleMappings = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/role-mappings/clients/{clientUniqueId}',
            urlParamKeys: ['id', 'clientUniqueId'],
            payloadKey: 'roles',
        });
        this.listAvailableClientRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/clients/{clientUniqueId}/available',
            urlParamKeys: ['id', 'clientUniqueId'],
        });
        this.listCompositeClientRoleMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/role-mappings/clients/{clientUniqueId}/composite',
            urlParamKeys: ['id', 'clientUniqueId'],
        });
        this.updatePermission = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}/management/permissions',
            urlParamKeys: ['id'],
        });
        this.listPermissions = this.makeRequest({
            method: 'GET',
            path: '/{id}/management/permissions',
            urlParamKeys: ['id'],
        });
    }
}
//# sourceMappingURL=groups.js.map