import Resource from './resource.js';
export class Realms extends Resource {
    constructor(client) {
        super(client, {
            path: '/admin/realms',
            getBaseUrl: () => client.baseUrl,
        });
        this.find = this.makeRequest({
            method: 'GET',
        });
        this.create = this.makeRequest({
            method: 'POST',
            returnResourceIdInLocationHeader: { field: 'realmName' },
        });
        this.findOne = this.makeRequest({
            method: 'GET',
            path: '/{realm}',
            urlParamKeys: ['realm'],
            catchNotFound: true,
        });
        this.update = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{realm}',
            urlParamKeys: ['realm'],
        });
        this.del = this.makeRequest({
            method: 'DELETE',
            path: '/{realm}',
            urlParamKeys: ['realm'],
        });
        this.partialImport = this.makeRequest({
            method: 'POST',
            path: '/{realm}/partialImport',
            urlParamKeys: ['realm'],
            payloadKey: 'rep',
        });
        this.export = this.makeRequest({
            method: 'POST',
            path: '/{realm}/partial-export',
            urlParamKeys: ['realm'],
            queryParamKeys: ['exportClients', 'exportGroupsAndRoles'],
        });
        this.getDefaultGroups = this.makeRequest({
            method: 'GET',
            path: '/{realm}/default-groups',
            urlParamKeys: ['realm'],
        });
        this.addDefaultGroup = this.makeRequest({
            method: 'PUT',
            path: '/{realm}/default-groups/{id}',
            urlParamKeys: ['realm', 'id'],
        });
        this.removeDefaultGroup = this.makeRequest({
            method: 'DELETE',
            path: '/{realm}/default-groups/{id}',
            urlParamKeys: ['realm', 'id'],
        });
        this.getGroupByPath = this.makeRequest({
            method: 'GET',
            path: '/{realm}/group-by-path/{path}',
            urlParamKeys: ['realm', 'path']
        });
        this.findEvents = this.makeRequest({
            method: 'GET',
            path: '/{realm}/events',
            urlParamKeys: ['realm'],
            queryParamKeys: [
                'client',
                'dateFrom',
                'dateTo',
                'first',
                'ipAddress',
                'max',
                'type',
                'user',
            ],
        });
        this.getConfigEvents = this.makeRequest({
            method: 'GET',
            path: '/{realm}/events/config',
            urlParamKeys: ['realm'],
        });
        this.updateConfigEvents = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{realm}/events/config',
            urlParamKeys: ['realm'],
        });
        this.clearEvents = this.makeRequest({
            method: 'DELETE',
            path: '/{realm}/events',
            urlParamKeys: ['realm'],
        });
        this.clearAdminEvents = this.makeRequest({
            method: 'DELETE',
            path: '/{realm}/admin-events',
            urlParamKeys: ['realm'],
        });
        this.getClientRegistrationPolicyProviders = this.makeRequest({
            method: 'GET',
            path: '/{realm}/client-registration-policy/providers',
            urlParamKeys: ['realm']
        });
        this.getClientsInitialAccess = this.makeRequest({
            method: 'GET',
            path: '/{realm}/clients-initial-access',
            urlParamKeys: ['realm'],
        });
        this.createClientsInitialAccess = this.makeUpdateRequest({
            method: 'POST',
            path: '/{realm}/clients-initial-access',
            urlParamKeys: ['realm'],
        });
        this.delClientsInitialAccess = this.makeRequest({
            method: 'DELETE',
            path: '/{realm}/clients-initial-access/{id}',
            urlParamKeys: ['realm', 'id'],
        });
        this.removeSession = this.makeRequest({
            method: 'DELETE',
            path: '/{realm}/sessions/{session}',
            urlParamKeys: ['realm', 'session'],
            catchNotFound: true,
        });
        this.findAdminEvents = this.makeRequest({
            method: 'GET',
            path: '/{realm}/admin-events',
            urlParamKeys: ['realm'],
            queryParamKeys: [
                'authClient',
                'authIpAddress',
                'authRealm',
                'authUser',
                'dateFrom',
                'dateTo',
                'max',
                'first',
                'operationTypes',
                'resourcePath',
                'resourceTypes',
            ],
        });
        this.getUsersManagementPermissions = this.makeRequest({
            method: 'GET',
            path: '/{realm}/users-management-permissions',
            urlParamKeys: ['realm'],
        });
        this.updateUsersManagementPermissions = this.makeRequest({
            method: 'PUT',
            path: '/{realm}/users-management-permissions',
            urlParamKeys: ['realm'],
        });
        this.logoutAll = this.makeRequest({
            method: 'POST',
            path: '/{realm}/logout-all',
            urlParamKeys: ['realm'],
        });
        this.deleteSession = this.makeRequest({
            method: 'DELETE',
            path: '/{realm}/sessions/{session}',
            urlParamKeys: ['realm', 'session'],
        });
        this.pushRevocation = this.makeRequest({
            method: 'POST',
            path: '/{realm}/push-revocation',
            urlParamKeys: ['realm'],
            ignoredKeys: ['realm'],
        });
        this.getKeys = this.makeRequest({
            method: 'GET',
            path: '/{realm}/keys',
            urlParamKeys: ['realm'],
        });
        this.testLDAPConnection = this.makeUpdateRequest({
            method: 'POST',
            path: '/{realm}/testLDAPConnection',
            urlParamKeys: ['realm'],
        });
        this.testSMTPConnection = this.makeUpdateRequest({
            method: 'POST',
            path: '/{realm}/testSMTPConnection',
            urlParamKeys: ['realm'],
        });
        this.ldapServerCapabilities = this.makeUpdateRequest({
            method: 'POST',
            path: '/{realm}/ldap-server-capabilities',
            urlParamKeys: ['realm'],
        });
        this.getRealmSpecificLocales = this.makeRequest({
            method: 'GET',
            path: '/{realm}/localization',
            urlParamKeys: ['realm'],
        });
        this.getRealmLocalizationTexts = this.makeRequest({
            method: 'GET',
            path: '/{realm}/localization/{selectedLocale}',
            urlParamKeys: ['realm', 'selectedLocale'],
        });
        this.addLocalization = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{realm}/localization/{selectedLocale}/{key}',
            urlParamKeys: ['realm', 'selectedLocale', 'key'],
            headers: { 'content-type': 'text/plain' },
        });
        this.deleteRealmLocalizationTexts = this.makeRequest({
            method: 'DELETE',
            path: '/{realm}/localization/{selectedLocale}/{key}',
            urlParamKeys: ['realm', 'selectedLocale', 'key'],
        });
    }
}
//# sourceMappingURL=realms.js.map