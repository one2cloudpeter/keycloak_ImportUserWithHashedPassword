import Resource from './resource.js';
export class Clients extends Resource {
    constructor(client) {
        super(client, {
            path: '/admin/realms/{realm}/clients',
            getUrlParams: () => ({
                realm: client.realmName,
            }),
            getBaseUrl: () => client.baseUrl,
        });
        this.find = this.makeRequest({
            method: 'GET',
        });
        this.create = this.makeRequest({
            method: 'POST',
            returnResourceIdInLocationHeader: { field: 'id' },
        });
        this.findOne = this.makeRequest({
            method: 'GET',
            path: '/{id}',
            urlParamKeys: ['id'],
            catchNotFound: true,
        });
        this.update = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}',
            urlParamKeys: ['id'],
        });
        this.del = this.makeRequest({
            method: 'DELETE',
            path: '/{id}',
            urlParamKeys: ['id'],
        });
        this.createRole = this.makeRequest({
            method: 'POST',
            path: '/{id}/roles',
            urlParamKeys: ['id'],
            returnResourceIdInLocationHeader: { field: 'roleName' },
        });
        this.listRoles = this.makeRequest({
            method: 'GET',
            path: '/{id}/roles',
            urlParamKeys: ['id'],
        });
        this.findRole = this.makeRequest({
            method: 'GET',
            path: '/{id}/roles/{roleName}',
            urlParamKeys: ['id', 'roleName'],
            catchNotFound: true,
        });
        this.updateRole = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}/roles/{roleName}',
            urlParamKeys: ['id', 'roleName'],
        });
        this.delRole = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/roles/{roleName}',
            urlParamKeys: ['id', 'roleName'],
        });
        this.findUsersWithRole = this.makeRequest({
            method: 'GET',
            path: '/{id}/roles/{roleName}/users',
            urlParamKeys: ['id', 'roleName'],
        });
        this.getServiceAccountUser = this.makeRequest({
            method: 'GET',
            path: '/{id}/service-account-user',
            urlParamKeys: ['id'],
        });
        this.generateNewClientSecret = this.makeRequest({
            method: 'POST',
            path: '/{id}/client-secret',
            urlParamKeys: ['id'],
        });
        this.invalidateSecret = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/client-secret/rotated',
            urlParamKeys: ['id'],
        });
        this.generateRegistrationAccessToken = this.makeRequest({
            method: 'POST',
            path: '/{id}/registration-access-token',
            urlParamKeys: ['id'],
        });
        this.getClientSecret = this.makeRequest({
            method: 'GET',
            path: '/{id}/client-secret',
            urlParamKeys: ['id'],
        });
        this.listDefaultClientScopes = this.makeRequest({
            method: 'GET',
            path: '/{id}/default-client-scopes',
            urlParamKeys: ['id'],
        });
        this.addDefaultClientScope = this.makeRequest({
            method: 'PUT',
            path: '/{id}/default-client-scopes/{clientScopeId}',
            urlParamKeys: ['id', 'clientScopeId'],
        });
        this.delDefaultClientScope = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/default-client-scopes/{clientScopeId}',
            urlParamKeys: ['id', 'clientScopeId'],
        });
        this.listOptionalClientScopes = this.makeRequest({
            method: 'GET',
            path: '/{id}/optional-client-scopes',
            urlParamKeys: ['id'],
        });
        this.addOptionalClientScope = this.makeRequest({
            method: 'PUT',
            path: '/{id}/optional-client-scopes/{clientScopeId}',
            urlParamKeys: ['id', 'clientScopeId'],
        });
        this.delOptionalClientScope = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/optional-client-scopes/{clientScopeId}',
            urlParamKeys: ['id', 'clientScopeId'],
        });
        this.addMultipleProtocolMappers = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/protocol-mappers/add-models',
            urlParamKeys: ['id'],
        });
        this.addProtocolMapper = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/protocol-mappers/models',
            urlParamKeys: ['id'],
        });
        this.listProtocolMappers = this.makeRequest({
            method: 'GET',
            path: '/{id}/protocol-mappers/models',
            urlParamKeys: ['id'],
        });
        this.findProtocolMapperById = this.makeRequest({
            method: 'GET',
            path: '/{id}/protocol-mappers/models/{mapperId}',
            urlParamKeys: ['id', 'mapperId'],
            catchNotFound: true,
        });
        this.findProtocolMappersByProtocol = this.makeRequest({
            method: 'GET',
            path: '/{id}/protocol-mappers/protocol/{protocol}',
            urlParamKeys: ['id', 'protocol'],
            catchNotFound: true,
        });
        this.updateProtocolMapper = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}/protocol-mappers/models/{mapperId}',
            urlParamKeys: ['id', 'mapperId'],
        });
        this.delProtocolMapper = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/protocol-mappers/models/{mapperId}',
            urlParamKeys: ['id', 'mapperId'],
        });
        this.listScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/scope-mappings',
            urlParamKeys: ['id'],
        });
        this.addClientScopeMappings = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/scope-mappings/clients/{client}',
            urlParamKeys: ['id', 'client'],
        });
        this.listClientScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/scope-mappings/clients/{client}',
            urlParamKeys: ['id', 'client'],
        });
        this.listAvailableClientScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/scope-mappings/clients/{client}/available',
            urlParamKeys: ['id', 'client'],
        });
        this.listCompositeClientScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/scope-mappings/clients/{client}/composite',
            urlParamKeys: ['id', 'client'],
        });
        this.delClientScopeMappings = this.makeUpdateRequest({
            method: 'DELETE',
            path: '/{id}/scope-mappings/clients/{client}',
            urlParamKeys: ['id', 'client'],
        });
        this.evaluatePermission = this.makeRequest({
            method: 'GET',
            path: '/{id}/evaluate-scopes/scope-mappings/{roleContainer}/{type}',
            urlParamKeys: ['id', 'roleContainer', 'type'],
            queryParamKeys: ['scope'],
        });
        this.evaluateListProtocolMapper = this.makeRequest({
            method: 'GET',
            path: '/{id}/evaluate-scopes/protocol-mappers',
            urlParamKeys: ['id'],
            queryParamKeys: ['scope'],
        });
        this.evaluateGenerateAccessToken = this.makeRequest({
            method: 'GET',
            path: '/{id}/evaluate-scopes/generate-example-access-token',
            urlParamKeys: ['id'],
            queryParamKeys: ['scope', 'userId'],
        });
        this.evaluateGenerateUserInfo = this.makeRequest({
            method: 'GET',
            path: '/{id}/evaluate-scopes/generate-example-userinfo',
            urlParamKeys: ['id'],
            queryParamKeys: ['scope', 'userId'],
        });
        this.evaluateGenerateIdToken = this.makeRequest({
            method: 'GET',
            path: '/{id}/evaluate-scopes/generate-example-id-token',
            urlParamKeys: ['id'],
            queryParamKeys: ['scope', 'userId'],
        });
        this.addRealmScopeMappings = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/scope-mappings/realm',
            urlParamKeys: ['id', 'client'],
        });
        this.listRealmScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/scope-mappings/realm',
            urlParamKeys: ['id'],
        });
        this.listAvailableRealmScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/scope-mappings/realm/available',
            urlParamKeys: ['id'],
        });
        this.listCompositeRealmScopeMappings = this.makeRequest({
            method: 'GET',
            path: '/{id}/scope-mappings/realm/composite',
            urlParamKeys: ['id'],
        });
        this.delRealmScopeMappings = this.makeUpdateRequest({
            method: 'DELETE',
            path: '/{id}/scope-mappings/realm',
            urlParamKeys: ['id'],
        });
        this.listSessions = this.makeRequest({
            method: 'GET',
            path: '/{id}/user-sessions',
            urlParamKeys: ['id'],
        });
        this.listOfflineSessions = this.makeRequest({
            method: 'GET',
            path: '/{id}/offline-sessions',
            urlParamKeys: ['id'],
        });
        this.getSessionCount = this.makeRequest({
            method: 'GET',
            path: '/{id}/session-count',
            urlParamKeys: ['id'],
        });
        this.getResourceServer = this.makeRequest({
            method: 'GET',
            path: '{id}/authz/resource-server',
            urlParamKeys: ['id'],
        });
        this.updateResourceServer = this.makeUpdateRequest({
            method: 'PUT',
            path: '{id}/authz/resource-server',
            urlParamKeys: ['id'],
        });
        this.listResources = this.makeRequest({
            method: 'GET',
            path: '{id}/authz/resource-server/resource',
            urlParamKeys: ['id'],
        });
        this.createResource = this.makeUpdateRequest({
            method: 'POST',
            path: '{id}/authz/resource-server/resource',
            urlParamKeys: ['id'],
        });
        this.getResource = this.makeRequest({
            method: 'GET',
            path: '{id}/authz/resource-server/resource/{resourceId}',
            urlParamKeys: ['id', 'resourceId'],
        });
        this.updateResource = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}/authz/resource-server/resource/{resourceId}',
            urlParamKeys: ['id', 'resourceId'],
        });
        this.delResource = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/authz/resource-server/resource/{resourceId}',
            urlParamKeys: ['id', 'resourceId'],
        });
        this.importResource = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/authz/resource-server/import',
            urlParamKeys: ['id'],
        });
        this.exportResource = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/settings',
            urlParamKeys: ['id'],
        });
        this.evaluateResource = this.makeUpdateRequest({
            method: 'POST',
            path: '{id}/authz/resource-server/policy/evaluate',
            urlParamKeys: ['id'],
        });
        this.listPolicies = this.makeRequest({
            method: 'GET',
            path: '{id}/authz/resource-server/policy',
            urlParamKeys: ['id'],
        });
        this.findPolicyByName = this.makeRequest({
            method: 'GET',
            path: '{id}/authz/resource-server/policy/search',
            urlParamKeys: ['id'],
        });
        this.updatePolicy = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}/authz/resource-server/policy/{type}/{policyId}',
            urlParamKeys: ['id', 'type', 'policyId'],
        });
        this.createPolicy = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/authz/resource-server/policy/{type}',
            urlParamKeys: ['id', 'type'],
        });
        this.findOnePolicy = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/policy/{type}/{policyId}',
            urlParamKeys: ['id', 'type', 'policyId'],
            catchNotFound: true,
        });
        this.listDependentPolicies = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/policy/{policyId}/dependentPolicies',
            urlParamKeys: ['id', 'policyId'],
        });
        this.delPolicy = this.makeRequest({
            method: 'DELETE',
            path: '{id}/authz/resource-server/policy/{policyId}',
            urlParamKeys: ['id', 'policyId'],
        });
        this.listPolicyProviders = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/policy/providers',
            urlParamKeys: ['id'],
        });
        this.listAllScopes = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/scope',
            urlParamKeys: ['id'],
        });
        this.listAllResourcesByScope = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/scope/{scopeId}/resources',
            urlParamKeys: ['id', 'scopeId'],
        });
        this.listAllPermissionsByScope = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/scope/{scopeId}/permissions',
            urlParamKeys: ['id', 'scopeId'],
        });
        this.listPermissionsByResource = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/resource/{resourceId}/permissions',
            urlParamKeys: ['id', 'resourceId'],
        });
        this.listScopesByResource = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/resource/{resourceName}/scopes',
            urlParamKeys: ['id', 'resourceName'],
        });
        this.createAuthorizationScope = this.makeUpdateRequest({
            method: 'POST',
            path: '{id}/authz/resource-server/scope',
            urlParamKeys: ['id'],
        });
        this.updateAuthorizationScope = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}/authz/resource-server/scope/{scopeId}',
            urlParamKeys: ['id', 'scopeId'],
        });
        this.getAuthorizationScope = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/scope/{scopeId}',
            urlParamKeys: ['id', 'scopeId'],
        });
        this.delAuthorizationScope = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/authz/resource-server/scope/{scopeId}',
            urlParamKeys: ['id', 'scopeId'],
        });
        this.findPermissions = this.makeRequest({
            method: 'GET',
            path: '{id}/authz/resource-server/permission',
            urlParamKeys: ['id'],
        });
        this.createPermission = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/authz/resource-server/permission/{type}',
            urlParamKeys: ['id', 'type'],
        });
        this.updatePermission = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}/authz/resource-server/permission/{type}/{permissionId}',
            urlParamKeys: ['id', 'type', 'permissionId'],
        });
        this.delPermission = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/authz/resource-server/permission/{type}/{permissionId}',
            urlParamKeys: ['id', 'type', 'permissionId'],
        });
        this.findOnePermission = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/permission/{type}/{permissionId}',
            urlParamKeys: ['id', 'type', 'permissionId'],
        });
        this.getAssociatedScopes = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/policy/{permissionId}/scopes',
            urlParamKeys: ['id', 'permissionId'],
        });
        this.getAssociatedResources = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/policy/{permissionId}/resources',
            urlParamKeys: ['id', 'permissionId'],
        });
        this.getAssociatedPolicies = this.makeRequest({
            method: 'GET',
            path: '/{id}/authz/resource-server/policy/{permissionId}/associatedPolicies',
            urlParamKeys: ['id', 'permissionId'],
        });
        this.getOfflineSessionCount = this.makeRequest({
            method: 'GET',
            path: '/{id}/offline-session-count',
            urlParamKeys: ['id'],
        });
        this.getInstallationProviders = this.makeRequest({
            method: 'GET',
            path: '/{id}/installation/providers/{providerId}',
            urlParamKeys: ['id', 'providerId'],
        });
        this.pushRevocation = this.makeRequest({
            method: 'POST',
            path: '/{id}/push-revocation',
            urlParamKeys: ['id'],
        });
        this.addClusterNode = this.makeRequest({
            method: 'POST',
            path: '/{id}/nodes',
            urlParamKeys: ['id'],
        });
        this.deleteClusterNode = this.makeRequest({
            method: 'DELETE',
            path: '/{id}/nodes/{node}',
            urlParamKeys: ['id', 'node'],
        });
        this.testNodesAvailable = this.makeRequest({
            method: 'GET',
            path: '/{id}/test-nodes-available',
            urlParamKeys: ['id'],
        });
        this.getKeyInfo = this.makeRequest({
            method: 'GET',
            path: '/{id}/certificates/{attr}',
            urlParamKeys: ['id', 'attr'],
        });
        this.generateKey = this.makeRequest({
            method: 'POST',
            path: '/{id}/certificates/{attr}/generate',
            urlParamKeys: ['id', 'attr'],
        });
        this.downloadKey = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/certificates/{attr}/download',
            urlParamKeys: ['id', 'attr'],
        });
        this.generateAndDownloadKey = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/certificates/{attr}/generate-and-download',
            urlParamKeys: ['id', 'attr'],
        });
        this.uploadKey = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/certificates/{attr}/upload',
            urlParamKeys: ['id', 'attr'],
        });
        this.uploadCertificate = this.makeUpdateRequest({
            method: 'POST',
            path: '/{id}/certificates/{attr}/upload-certificate',
            urlParamKeys: ['id', 'attr'],
        });
        this.updateFineGrainPermission = this.makeUpdateRequest({
            method: 'PUT',
            path: '/{id}/management/permissions',
            urlParamKeys: ['id'],
        });
        this.listFineGrainPermissions = this.makeRequest({
            method: 'GET',
            path: '/{id}/management/permissions',
            urlParamKeys: ['id'],
        });
    }
    async createOrUpdatePolicy(payload) {
        const policyFound = await this.findPolicyByName({
            id: payload.id,
            name: payload.policyName,
        });
        if (policyFound) {
            await this.updatePolicy({ id: payload.id, policyId: policyFound.id, type: payload.policy.type }, payload.policy);
            return this.findPolicyByName({ id: payload.id, name: payload.policyName });
        }
        else {
            return this.createPolicy({ id: payload.id, type: payload.policy.type }, payload.policy);
        }
    }
    async findProtocolMapperByName(payload) {
        const allProtocolMappers = await this.listProtocolMappers({
            id: payload.id,
            ...(payload.realm ? { realm: payload.realm } : {}),
        });
        return allProtocolMappers.find((mapper) => mapper.name === payload.name);
    }
}
//# sourceMappingURL=clients.js.map