import axios from 'axios';
import camelize from 'camelize-ts';
import { defaultBaseUrl, defaultRealm } from './constants.js';
import { stringifyQueryParams } from './stringifyQueryParams.js';
export const getToken = async (settings) => {
    const baseUrl = settings.baseUrl || defaultBaseUrl;
    const realmName = settings.realmName || defaultRealm;
    const url = `${baseUrl}/realms/${realmName}/protocol/openid-connect/token`;
    const credentials = settings.credentials || {};
    const payload = stringifyQueryParams({
        username: credentials.username,
        password: credentials.password,
        grant_type: credentials.grantType,
        client_id: credentials.clientId,
        totp: credentials.totp,
        ...(credentials.offlineToken ? { scope: 'offline_access' } : {}),
        ...(credentials.refreshToken ? {
            refresh_token: credentials.refreshToken,
            client_secret: credentials.clientSecret,
        } : {}),
    });
    const config = {
        ...settings.requestConfig,
    };
    if (credentials.clientSecret) {
        config.auth = {
            username: credentials.clientId,
            password: credentials.clientSecret,
        };
    }
    const { data } = await axios.default.post(url, payload, config);
    return camelize(data);
};
//# sourceMappingURL=auth.js.map